library(readxl)
X3_Investment_Data_258099571 <- read_excel("C:/Users/Hammad/Desktop/Python New Code/R Project/3.-Investment-Data_258099571.xlsx")
View(X3_Investment_Data_258099571)
cls
data <- read.csv("3.-Investment-Data_258099571.csv")
ls
dir
df
dat
data()
data
data <- read.csv("C:\Users\Hammad\Desktop\Python New Code\R Project\3.-Investment-Data_258099571.csv")
data <- read.csv("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.csv")
data <- read.csv("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
View(X3_Investment_Data_258099571)
summary.Date()
summary.Date(MktPrice)
summary.Date('MktPrice')
summary.Date
# Exploratory Data Analysis (EDA)
summary(data)
data <- read.csv("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
summary(data)
#summary(data)
par(mfrow=c(2, 2))
#summary(data)
#par(mfrow=c(2, 2))
hist(data$MktPrice, main="Market Price Histogram")
#summary(data)
#par(mfrow=c(2, 2))
#hist(data$MktPrice, main="Market Price Histogram")
#hist(data$DivYield, main="Dividend Yield Histogram")
boxplot(data$PERatio, main="PE Ratio Boxplot")
#summary(data)
#par(mfrow=c(2, 2))
#hist(data$MktPrice, main="Market Price Histogram")
#hist(data$DivYield, main="Dividend Yield Histogram")
#boxplot(data$PERatio, main="PE Ratio Boxplot")
scatterplot <- ggplot(data, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
library(ggplot2)
install.packages("ggplot2")
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
#summary(data)
#par(mfrow=c(2, 2))
#hist(data$MktPrice, main="Market Price Histogram")
#hist(data$DivYield, main="Dividend Yield Histogram")
#boxplot(data$PERatio, main="PE Ratio Boxplot")
scatterplot <- ggplot(data, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
install.packages("ggplot")
#summary(data)
#par(mfrow=c(2, 2))
#hist(data$MktPrice, main="Market Price Histogram")
#hist(data$DivYield, main="Dividend Yield Histogram")
#boxplot(data$PERatio, main="PE Ratio Boxplot")
scatterplot <- ggplot(data, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
#summary(data)
#par(mfrow=c(2, 2))
#hist(data$MktPrice, main="Market Price Histogram")
#hist(data$DivYield, main="Dividend Yield Histogram")
#boxplot(data$PERatio, main="PE Ratio Boxplot")
library(ggplot2)
#summary(data)
#par(mfrow=c(2, 2))
#hist(data$MktPrice, main="Market Price Histogram")
#hist(data$DivYield, main="Dividend Yield Histogram")
#boxplot(data$PERatio, main="PE Ratio Boxplot")
library(ggplot2)
scatterplot <- ggplot(data, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
print(scatterplot)
# Correlation Analysis
cor_matrix <- cor(data[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "TotalSales17", "TotalSales18")])
# Replace missing values with the mean of each column
data_filled <- zoo::na.aggregate(data, FUN = mean)
library(zoo)
install.packages("zoo")
library(zoo)  ## install.packages("zoo")
library(zoo)  ## install.packages("zoo")
# Replace missing values with the mean of each column
data_filled <- zoo::na.aggregate(data, FUN = mean)
# Now, check if there are any missing values left
missing_values <- any(is.na(data_filled))
if (missing_values) {
cat("There are still missing values in the data.")
} else {
cat("All missing values have been filled.")
}
# Replace missing values with the mean of each column
data_filled <- zoo::na.aggregate(data, FUN = mean)
data_filled
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
library(zoo)  ## install.packages("zoo")
# Replace missing values with the mean of each column
data_filled <- zoo::na.aggregate(data, FUN = mean)
warning()
# Replace missing values with the mean of each column
warning()
data_filled <- zoo::na.aggregate(data, FUN = mean)
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
data
install.packages("imputeTS")
library(imputeTS) ## install.packages("imputeTS")
# Replace missing values with the mean of each column
data_filled <- impute(data, classes = "mean")
install.packages("imputeTS")
install.packages("imputeTS")
library(imputeTS) ## install.packages("imputeTS")
install.packages("imputeTS")
install.packages("imputeTS")
library(zoo)  ## install.packages("zoo")
library(imputeTS) ## install.packages("imputeTS")
install.packages("imputeTS")
install.packages("imputeTS")
cls
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
library(readxl)
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
library(imputeTS) ## install.packages("imputeTS")
# Replace missing values with the mean of each column
data_filled <- impute(data, classes = "mean")
data_filled <- zoo::na.aggregate(data, FUN = mean)
View(data_filled)
View(data)
View(data_filled)
View(data)
View(data_filled)
View(data)
View(data)
# column data type
column_data_type <- class(data$PERatio)
print(paste("Data type of the column:", column_data_type_class))
print(paste("Data type of the column:", column_data_type))
library(zoo)  ## install.packages("zoo")
uninstall.packages("imputeTS")
remove.packages("imputeTS")
library("zoo")
library(zoo)  ## install.packages("zoo")
library(imputeTS) ## install.packages("imputeTS")
# Replace missing values with the mean of each column
data_filled <- impute(data, classes = "mean")
data_filled <- zoo::na.aggregate(data, FUN = mean)
library(imputeTS) ## install.packages("imputeTS")
library(imputeTS)
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}warnings()
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}warnings()
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
warnings()
View(data)
View(data)
View(data_filled)
class(data_filled$PERatio)
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
if (is.numeric(data_filled[[col]])) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
} else {
print("Non numeric")
}
}
}
for (col in names(data)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
for (col in names(data)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
warning()
for (col in names(data)){
print(col)
}
for (col in names(data)) {
if (any(is.na(data[[col]]))) {
data_filled[[col]][is.na(data[[col]])] <- mean(data[[col]], na.rm = TRUE)
}
}
warning()
data_filled <- data
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
warning()
View(data_filled)
# Now, check if there are any missing values left
missing_values <- any(is.na(data_filled))
View(data_filled)
library(readxl)
# reading Excel file
data <- read_excel("C:\\Users\\Hammad\\Desktop\\Python New Code\\R Project\\3.-Investment-Data_258099571.xlsx")
# column data type
column_data_type <- class(data$PERatio)
print(paste("Data type of the column:", column_data_type))
# replacing missing values with mean
library(imputeTS) ## install.packages("imputeTS")
data_filled <- data
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
View(data_filled)
# column data type
column_data_type <- class(data$DivYield)
print(paste("Data type of the column:", column_data_type))
# converting column value to numeric
data$DivYield <- as.numeric(data$DivYield)
# column data type
column_data_type <- class(data$DivYield)
print(paste("Data type of the column:", column_data_type))
# converting column value to numeric
data$DivYield <- as.numeric(data$DivYield)
# replacing missing values with mean
library(imputeTS) ## install.packages("imputeTS")
data_filled <- data
for (col in names(data_filled)) {
if (any(is.na(data_filled[[col]]))) {
data_filled[[col]][is.na(data_filled[[col]])] <- mean(data_filled[[col]], na.rm = TRUE)
}
}
# checking if there are any missing values left
missing_values <- any(is.na(data_filled))
if (missing_values) {
cat("There are still missing values in the data.")
} else {
cat("All missing values have been filled.")
}
# Exploratory Data Analysis (EDA)
summary(data)
par(mfrow=c(2, 2))
hist(data$MktPrice, main="Market Price Histogram")
hist(data$DivYield, main="Dividend Yield Histogram")
boxplot(data$PERatio, main="PE Ratio Boxplot")
library(ggplot2) ## install.packages("ggplot2")
# Exploratory Data Analysis (EDA)
summary(data_filled)
par(mfrow=c(2, 2))
hist(data_filled$MktPrice, main="Market Price Histogram")
hist(data_filled$DivYield, main="Dividend Yield Histogram")
boxplot(data_filled$PERatio, main="PE Ratio Boxplot")
scatterplot <- ggplot(data_filled, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
print(scatterplot)
# Correlation Analysis
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "TotalSales17", "TotalSales18")])
corrplot(cor_matrix, method="color")
library(corrplot)
install.packages("corrplot")
library(corrplot) ## install.packages("corrplot")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "TotalSales17", "TotalSales18")])
corrplot(cor_matrix, method="color")
model <- lm(MktPrice ~ DivYield + PERatio + TotalSales17 + TotalSales18, data=data_filled)
summary(model)
retail_data <- subset(data_filled, Sector == "Retail")
retail_data <- subset(data_filled, Sector == "Retail")
# Comparative Analysis
retail_data <- subset(data_filled, Sector == "Retail")
ggsave("correlation_plot.png", plot = last_plot(), device = "png")
corrplot::corrplot(cor_matrix, method = "circle")
# # Task 1: Find which variables give the best measures of the investment potential
# Correlation Analysis
cor_matrix <- cor(data[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle")
corrplot::corrplot(cor_matrix, method = "circle", size = 20)
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 2, 0)))
# # Task 1: Find which variables give the best measures of the investment potential
# Correlation Analysis
cor_matrix <- cor(data[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 2, 0)))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 2, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 20, 0))
# # Task 1: Find which variables give the best measures of the investment potential
# Correlation Analysis
cor_matrix <- cor(data[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 20, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 4, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 1, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 0, 0, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(0, 1, 0, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(1, 1, 0, 0))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(1, 1, 0, 1))
corrplot::corrplot(cor_matrix, method = "circle", mar = c(1, 1, 1, 1))
# # Task 1: Find which variables give the best measures of the investment potential
# Correlation Analysis
cor_matrix <- cor(data[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle", lab = TRUE)
corrplot::corrplot(cor_matrix, method = "circle")
# # Task 1: Find which variables give the best measures of the investment potential
# Correlation Analysis
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle")
# Task 2: Draw conclusions on which types of stock would provide the best investment
ggplot(data_filled, aes(x = factor(Type), y = MktPrice)) +
geom_boxplot() +
labs(title = "Boxplot of Market Price by Type of Company")
ggplot(data_filled, aes(x = factor(Type), y = MktPrice)) +
geom_boxplot() +
labs(title = "Boxplot of Market Price by Type of Company")
rlang::last_trace()
# Create a hypothetical grouping variable named 'Category'
data_filled$Category <- sample(c("Large", "Medium", "Small"), nrow(data_filled), replace = TRUE)
# Boxplot based on the hypothetical 'Category' variable
ggplot(data_filled, aes(x = factor(Category), y = MktPrice)) +
geom_boxplot() +
labs(title = "Boxplot of Market Price by Category")
# Task 3: Assess the validity of any predictions made
# Example: Scatter plot of Total Market Cap vs. Total Sales for validity assessment
ggplot(data, aes(x = TotalSales17 + TotalSales18, y = TotMktCap)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scatter Plot of Total Sales vs. Total Market Cap",
subtitle = "Linear Regression Line for Validity Assessment")
# Task 3: Assess the validity of any predictions made
# Example: Scatter plot of Total Market Cap vs. Total Sales for validity assessment
ggplot(data_filled, aes(x = TotalSales17 + TotalSales18, y = TotMktCap)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scatter Plot of Total Sales vs. Total Market Cap",
subtitle = "Linear Regression Line for Validity Assessment")
# Save the plots to files if needed
ggsave("correlation_plot.png", plot = last_plot(), device = "png")
ggsave("boxplot.png", plot = last_plot(), device = "png")
ggsave("scatter_plot.png", plot = last_plot(), device = "png")
scatterplot <- ggplot(data_filled, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
print(scatterplot)
# # Task 1: Find which variables give the best measures of the investment potential
# Correlation Analysis
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle")
# save plot
ggsave("correlation_plot.png", plot = last_plot(), device = "png")
# Task 2: Draw conclusions on which types of stock would provide the best investment
# Create a hypothetical grouping variable named 'Category'
data_filled$Category <- sample(c("Large", "Medium", "Small"), nrow(data_filled), replace = TRUE)
# Boxplot based on the hypothetical 'Category' variable
ggplot(data_filled, aes(x = factor(Category), y = MktPrice)) +
geom_boxplot() +
labs(title = "Boxplot of Market Price by Category")
# save plot
ggsave("boxplot.png", plot = last_plot(), device = "png")
# Task 3: Assess the validity of any predictions made
# Example: Scatter plot of Total Market Cap vs. Total Sales for validity assessment
ggplot(data_filled, aes(x = TotalSales17 + TotalSales18, y = TotMktCap)) +
geom_point() +
geom_smooth(method = "lm", se = FALSE, color = "red") +
labs(title = "Scatter Plot of Total Sales vs. Total Market Cap",
subtitle = "Linear Regression Line for Validity Assessment")
# Save plot
ggsave("scatter_plot.png", plot = last_plot(), device = "png")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle")
ggsave("correlation_plot.png", plot = correlation_plot, device = "png")
library(ggplot2) ## install.packages("ggplot2")
ggsave("correlation_plot.png", plot = correlation_plot, device = "png")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
corrplot::corrplot(cor_matrix, method = "circle")
ggsave("correlation_plot.png", plot = correlation_plot, device = "png")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
#corrplot::corrplot(cor_matrix, method = "circle")
correlation_plot <- corrplot(cor_matrix, method = "circle")
#corrplot::corrplot(cor_matrix, method = "circle")
correlation_plot <- corrplot::corrplot(cor_matrix, method = "circle")
ggsave("correlation_plot.png", plot = correlation_plot, device = "png")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
#corrplot::corrplot(cor_matrix, method = "circle")
correlation_plot <- corrplot(cor_matrix, method = "circle")
library(corrplot) ## install.packages("corrplot")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
#corrplot::corrplot(cor_matrix, method = "circle")
correlation_plot <- corrplot(cor_matrix, method = "circle")
# save plot
#ggsave("correlation_plot.png", plot = last_plot(), device = "png")
ggsave("correlation_plot1.png", plot = correlation_plot, device = "png")
cor_matrix <- cor(data_filled[, c("MktPrice", "TotMktCap", "DivYield", "PERatio", "Beta", "TotalSales17", "TotalSales18", "CapEmp", "Dividend", "MktBook", "Ret17", "Ret18")])
#corrplot::corrplot(cor_matrix, method = "circle")
correlation_plot <- corrplot(cor_matrix, method = "circle")
# save plot
#ggsave("correlation_plot.png", plot = last_plot(), device = "png")
ggsave("correlation_plot1.png", plot = correlation_plot, device = "png")
png("correlation_plot1.png", width = 5.75, height = 3.48, units = "in", res = 300)
corrplot(cor_matrix, method = "circle")
dev.off()
par(mfrow=c(2, 2))
png("market_price_histogram.png", width = 7, height = 5, units = "in", res = 300)
hist(data_filled$MktPrice, main = "Market Price Histogram")
dev.off()
png("dividend_yield_histogram.png", width = 7, height = 5, units = "in", res = 300)
hist(data_filled$DivYield, main = "Dividend Yield Histogram")
dev.off()
# Save the PE Ratio boxplot using png()
png("pe_ratio_boxplot.png", width = 7, height = 5, units = "in", res = 300)
boxplot(data_filled$PERatio, main = "PE Ratio Boxplot")
dev.off()
scatterplot <- ggplot(data_filled, aes(x=TotalSales17, y=TotalSales18)) +
geom_point() +
labs(title="Scatter Plot of Total Sales (2017 vs 2018)")
print(scatterplot)
